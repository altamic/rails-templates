# Ben Johnson's Authlogic Rails Template
# based on http://www.binarylogic.com/2008/11/21/tutorial-using-openid-with-authlogic
# and http://github.com/binarylogic/authlogic

def next_migration_string
  Time.now.utc.strftime("%Y%m%d%H%M%S")
end

gem "authlogic"

run "\[ -e public/index.html \] && rm public/index.html"
run "\[ -e public/images/rails.png \] && rm public/images/rails.png"

git :init

plugin 'open_id_authentication', :git => 'git://github.com/rails/open_id_authentication.git', :submodule => true

generate :model, "user"

file "db/migrate/#{next_migration_string}_create_users.rb", <<-CREATE_USERS
class CreateUsers < ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.timestamps
      t.string :login, :null => false
      t.string :crypted_password, :null => false
      t.string :password_salt, :null => false
      t.string :persistence_token, :null => false
      t.integer :login_count, :default => 0, :null => false
      t.datetime :last_request_at
      t.datetime :last_login_at
      t.datetime :current_login_at
      t.string :last_login_ip
      t.string :current_login_ip
    end
    
    add_index :users, :login
    add_index :users, :persistence_token
    add_index :users, :last_request_at
  end

  def self.down
    drop_table :users
  end
end
CREATE_USERS

sleep 1

file "db/migrate/#{next_migration_string}_create_sessions.rb", <<-CREATE_SESSIONS
class CreateSessions < ActiveRecord::Migration
  def self.up
    create_table :sessions do |t|
      t.string :session_id, :null => false
      t.text :data
      t.timestamps
    end

    add_index :sessions, :session_id
    add_index :sessions, :updated_at
  end

  def self.down
    drop_table :sessions
  end
end
CREATE_SESSIONS

sleep 1

file "db/migrate/#{next_migration_string}_add_users_password_reset_fields.rb", <<-USERS_PASSWORD_RESET_FIELDS
class AddUsersPasswordResetFields < ActiveRecord::Migration
  def self.up
    add_column :users, :perishable_token, :string, :default => "", :null => false
    add_column :users, :email, :string, :default => "", :null => false
    
    add_index :users, :perishable_token
    add_index :users, :email
  end

  def self.down
    remove_column :users, :perishable_token
    remove_column :users, :email
  end
end
USERS_PASSWORD_RESET_FIELDS

sleep 1

file "db/migrate/#{next_migration_string}_add_users_openid_field.rb", <<-OPENID_FIELDS
class AddUsersOpenidField < ActiveRecord::Migration
  def self.up
    add_column :users, :openid_identifier, :string
    add_index :users, :openid_identifier

    change_column :users, :login, :string, :default => nil, :null => true
    change_column :users, :crypted_password, :string, :default => nil, :null => true
    change_column :users, :password_salt, :string, :default => nil, :null => true
  end

  def self.down
    remove_column :users, :openid_identifier
    [:login, :crypted_password, :password_salt].each do |field|
      User.all(:conditions => "\#{field} is NULL").each { |user| user.update_attribute(field, "") if user.send(field).nil? }
      change_column :users, field, :string, :default => "", :null => false
    end
  end
end
OPENID_FIELDS

rake "db:migrate"

file "app/controllers/application.rb", <<-APPLICATION
# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.

class ApplicationController < ActionController::Base
  helper :all
  helper_method :current_user_session, :current_user
  filter_parameter_logging :password, :password_confirmation
  
  private
    def current_user_session
      return @current_user_session if defined?(@current_user_session)
      @current_user_session = UserSession.find
    end
    
    def current_user
      return @current_user if defined?(@current_user)
      @current_user = current_user_session && current_user_session.record
    end
    
    def require_user
      unless current_user
        store_location
        flash[:notice] = "You must be logged in to access this page"
        redirect_to new_user_session_url
        return false
      end
    end

    def require_no_user
      if current_user
        store_location
        flash[:notice] = "You must be logged out to access this page"
        redirect_to account_url
        return false
      end
    end
    
    def store_location
      session[:return_to] = request.request_uri
    end
    
    def redirect_back_or_default(default)
      redirect_to(session[:return_to] || default)
      session[:return_to] = nil
    end
end
APPLICATION

rake "rails:update:application_controller"

file "app/models/user.rb", <<-USER_MODEL
class User < ActiveRecord::Base
  # ALL of the following code is for OpenID integration. If you are not using OpenID in your app
  # just remove all of the following code, to the point where you User class is completely blank.
  acts_as_authentic :login_field_validation_options => {:if => :openid_identifier_blank?}, :password_field_validation_options => {:if => :openid_identifier_blank?}
  
  validate :normalize_openid_identifier
  validates_uniqueness_of :openid_identifier, :allow_blank => true
  
  # For acts_as_authentic configuration
  def openid_identifier_blank?
    openid_identifier.blank?
  end
  
  def deliver_password_reset_instructions!
    reset_perishable_token!
    Notifier.deliver_password_reset_instructions(self)
  end
  
  private
    def normalize_openid_identifier
      begin
        self.openid_identifier = OpenIdAuthentication.normalize_url(openid_identifier) if !openid_identifier.blank?
      rescue OpenIdAuthentication::InvalidOpenId => e
        errors.add(:openid_identifier, e.message)
      end
    end
end
USER_MODEL

file "app/models/user_session.rb", <<-USER_SESSION_MODEL
class UserSession < Authlogic::Session::Base
  # ALL of the following code is for OpenID integration. If you are not using OpenID in your app
  # just remove all of the following code, to the point where you UserSession class is completely blank.
  attr_accessor :openid_identifier
  
  def authenticating_with_openid?
    !openid_identifier.blank? || controller.params[:open_id_complete]
  end
  
  def save(&block)
    if authenticating_with_openid?
      raise ArgumentError.new("You must supply a block to authenticate with OpenID") unless block_given?

      controller.send(:authenticate_with_open_id, openid_identifier) do |result, openid_identifier|
        if !result.successful?
          errors.add_to_base(result.message)
          yield false
          return
        end

        record = klass.find_by_openid_identifier(openid_identifier)

        if !record
          errors.add(:openid_identifier, "did not match any users in our database, have you set up your account to use OpenID?")
          yield false
          return
        end

        self.unauthorized_record = record
        super
      end
    else
      super
    end
  end
end
USER_SESSION_MODEL


file "app/controllers/user_sessions_controller.rb", <<-USER_SESSIONS_CONTROLLER
class UserSessionsController < ApplicationController
  before_filter :require_no_user, :only => [:new, :create]
  before_filter :require_user, :only => :destroy
  
  def new
    @user_session = UserSession.new
  end
  
  def create
    @user_session = UserSession.new(params[:user_session])
    # We are saving with a block to accomodate for OpenID authentication
    # If you are not using OpenID you can save without a block:
    #
    #   if @user_session.save
    #     # ... successful login
    #   else
    #     # ... unsuccessful login
    #   end
    @user_session.save do |result|
      if result
        flash[:notice] = "Login successful!"
        redirect_back_or_default account_url
      else
        render :action => :new
      end
    end
  end
  
  def destroy
    current_user_session.destroy
    flash[:notice] = "Logout successful!"
    redirect_back_or_default new_user_session_url
  end
end
USER_SESSIONS_CONTROLLER

file "config/routes.rb", <<-ROUTES
ActionController::Routing::Routes.draw do |map|
  map.resource :account, :controller => "users"
  map.resources :password_resets
  map.resources :users
  map.resource :user_session
  map.root :controller => "user_sessions", :action => "new"
end
ROUTES

file "app/views/notifier/password_reset_instructions.erb", <<-PASSWORD_RESET_INSTRUCTIONS
A request to reset your password has been made. If you did not make this request, simply ignore this email. If you did make this request just click the link below:

<%= @edit_password_reset_url %>

If the above URL does not work try copying and pasting it into your browser. If you continue to have problem please feel free to contact us.
PASSWORD_RESET_INSTRUCTIONS

file "app/views/layouts/application.html.erb", <<-APPLICATION_LAYOUT
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title><%= controller.controller_name %>: <%= controller.action_name %></title>
  <%= stylesheet_link_tag 'scaffold' %>
  <%= javascript_include_tag :defaults %>
</head>
<body>

<span style="float: right; text-align: right;"><%= link_to "Source code", "http://github.com/binarylogic/authlogic_example" %> | <%= link_to "Setup tutorial", "http://www.binarylogic.com/2008/11/3/tutorial-authlogic-basic-setup" %> | <%= link_to "Password reset tutorial", "http://www.binarylogic.com/2008/11/16/tutorial-reset-passwords-with-authlogic" %><br />
<%= link_to "OpenID tutorial", "http://www.binarylogic.com/2008/11/21/tutorial-using-openid-with-authlogic" %> | <%= link_to "Authlogic Repo", "http://github.com/binarylogic/authlogic" %> | <%= link_to "Authlogic Doc", "http://authlogic.rubyforge.org/" %></span>
<h1>Authlogic Example App</h1>
<%= pluralize User.logged_in.count, "user" %> currently logged in<br /> <!-- This based on last_request_at, if they were active < 10 minutes they are logged in -->
<br />
<br />

<% if !current_user %>
  <%= link_to "Register", new_account_path %> |
  <%= link_to "Log In", new_user_session_path %> |
  <%= link_to "Forgot password", new_password_reset_path %>
<% else %>
  <%= link_to "My Account", account_path %> |
  <%= link_to "Logout", user_session_path, :method => :delete, :confirm => "Are you sure you want to logout?" %>
<% end %>

<p style="color: green"><%= flash[:notice] %></p>

<%= yield  %>

</body>
</html>
APPLICATION_LAYOUT

file "app/views/password_resets/new.html.erb", <<-NEW
<h1>Forgot Password</h1>

Fill out the form below and instructions to reset your password will be emailed to you:<br />
<br />

<% form_tag password_resets_path do %>
  <label>Email:</label><br />
  <%= text_field_tag "email" %><br />
  <br />
  <%= submit_tag "Reset my password" %>
<% end %>
NEW

file "app/views/password_resets/edit.html.erb",<<-EDIT
<h1>Change My Password</h1>

<% form_for @user, :url => password_reset_path, :method => :put do |f| %>
  <%= f.error_messages %>
  <%= f.label :password %><br />
  <%= f.password_field :password %><br />
  <br />
  <%= f.label :password_confirmation %><br />
  <%= f.password_field :password_confirmation %><br />
  <br />
  <%= f.submit "Update my password and log me in" %>
<% end %>
EDIT

file "app/views/user_sessions/new.html.erb",<<-NEW
<h1>Login</h1>

<% form_for @user_session, :url => user_session_path do |f| %>
  <%= f.error_messages %>
  <div id="login_container"<% unless @user_session.openid_identifier.blank? %> style="display: none;"<% end %>>
    <%= f.label :login %> (or <%= link_to_function "login using OpenID", "$('login_container').toggle(); $('openid_container').toggle();" %>)<br />
    <%= f.text_field :login %><br />
    <br />
    <%= f.label :password %><br />
    <%= f.password_field :password %><br />
  </div>
  <!--
    Notice the following is for OpenID. If you are not implementing OpenID in your app, simply remove the following <div> block.
    Also, notice the <div id="login_container"> above, those fields do not need to be wrapped in a <div>, you can remove that as well.
    I apologize if this makes it a little confusing, I have been building this app with a number of tutorials and one of them has been
    OpenID integration.
  -->
  <div id="openid_container"<% if @user_session.openid_identifier.blank? %> style="display: none;"<% end %>>
    <%= f.label :openid_identifier, "OpenID" %> (or <%= link_to_function "login using a standard username / password", "$('login_container').toggle(); $('openid_container').toggle();" %>)<br /><br />
    <%= f.text_field :openid_identifier %><br />
  </div>
  <br />
  <%= f.check_box :remember_me %><%= f.label :remember_me %><br />
  <br />
  <%= f.submit "Login" %>
<% end %>
NEW

file "app/views/users/new.html.erb", <<-NEW 
<h1>Register</h1>

<% form_for @user, :url => account_path do |f| %>
  <%= f.error_messages %>
  <%= render :partial => "form", :object => f %>
  <%= f.submit "Register" %>
<% end %>
NEW

file "app/views/users/edit.html.erb", <<-EDIT 
<h1>Edit My Account</h1>

<% form_for @user, :url => account_path do |f| %>
  <%= f.error_messages %>
  <%= render :partial => "form", :object => f %>
  <%= f.submit "Update" %>
<% end %>

<br /><%= link_to "My Profile", account_path %>
EDIT

file "app/views/users/show.html.erb", <<-SHOW
<!--
  The following is for OpenID, if you are not using OpenID in your app remove
  the OpenID if statement and field below.
-->
<% if @user.openid_identifier.blank? %>
  <p>
    <b>Login:</b>
    <%=h @user.login %>
  </p>
<% else %>
  <p>
    <b>OpenID:</b>
    <%=h @user.openid_identifier %>
  </p>
<% end %>
<p>
  <b>Email:</b>
  <%=h @user.email %>
</p>

<p>
  <b>Login count:</b>
  <%=h @user.login_count %>
</p>

<p>
  <b>Last request at:</b>
  <%=h @user.last_request_at %>
</p>

<p>
  <b>Last login at:</b>
  <%=h @user.last_login_at %>
</p>

<p>
  <b>Current login at:</b>
  <%=h @user.current_login_at %>
</p>

<p>
  <b>Last login ip:</b>
  <%=h @user.last_login_ip %>
</p>

<p>
  <b>Current login ip:</b>
  <%=h @user.current_login_ip %>
</p>


<%= link_to 'Edit', edit_account_path %>
SHOW

file "app/views/users/_form.erb", <<-FORM 
<%= form.label :login %><br />
<%= form.text_field :login %><br />
<br />
<%= form.label :password, form.object.new_record? ? nil : "Change password" %><br />
<%= form.password_field :password %><br />
<br />
<%= form.label :password_confirmation %><br />
<%= form.password_field :password_confirmation %><br />
<br />
<!--
  The following is for OpenID integration, if you are not using OpenID in your app
  simple remove the :openid_identifier label and field
-->
<%= form.label :openid_identifier, "Or use OpenID instead of a standard login / password" %><br />
<%= form.text_field :openid_identifier %><br />
<br />
<%= form.label :email %><br />
<%= form.text_field :email %><br />
<br />
FORM

file "app/controllers/password_resets_controller.rb", <<-PASSWORD_RESETS_CONTROLLER
class PasswordResetsController < ApplicationController
  before_filter :load_user_using_perishable_token, :only => [:edit, :update]
  before_filter :require_no_user
  
  def new
    render
  end
  
  def create
    @user = User.find_by_email(params[:email])
    if @user
      @user.deliver_password_reset_instructions!
      flash[:notice] = "Instructions to reset your password have been emailed to you. " +
        "Please check your email."
      redirect_to root_url
    else
      flash[:notice] = "No user was found with that email address"
      render :action => :new
    end
  end
  
  def edit
    render
  end

  def update
    @user.password = params[:user][:password]
    @user.password_confirmation = params[:user][:password_confirmation]
    if @user.save
      flash[:notice] = "Password successfully updated"
      redirect_to account_url
    else
      render :action => :edit
    end
  end

  private
    def load_user_using_perishable_token
      @user = User.find_using_perishable_token(params[:id])
      unless @user
        flash[:notice] = "We're sorry, but we could not locate your account." +
          "If you are having issues try copying and pasting the URL " +
          "from your email into your browser or restarting the " +
          "reset password process."
        redirect_to root_url
      end
    end
end

PASSWORD_RESETS_CONTROLLER

file "app/controllers/user_sessions_controller.rb", <<-USER_SESSIONS_CONTROLLER
class UserSessionsController < ApplicationController
  before_filter :require_no_user, :only => [:new, :create]
  before_filter :require_user, :only => :destroy
  
  def new
    @user_session = UserSession.new
  end
  
  def create
    @user_session = UserSession.new(params[:user_session])
    # We are saving with a block to accomodate for OpenID authentication
    # If you are not using OpenID you can save without a block:
    #
    #   if @user_session.save
    #     # ... successful login
    #   else
    #     # ... unsuccessful login
    #   end
    @user_session.save do |result|
      if result
        flash[:notice] = "Login successful!"
        redirect_back_or_default account_url
      else
        render :action => :new
      end
    end
  end
  
  def destroy
    current_user_session.destroy
    flash[:notice] = "Logout successful!"
    redirect_back_or_default new_user_session_url
  end
end

USER_SESSIONS_CONTROLLER


file "app/controllers/users_controller.rb", <<-USERS_CONTROLLER
class UsersController < ApplicationController
  before_filter :require_no_user, :only => [:new, :create]
  before_filter :require_user, :only => [:show, :edit, :update]
  
  def new
    @user = User.new
  end
  
  def create
    @user = User.new(params[:user])
    if @user.save
      flash[:notice] = "Account registered!"
      redirect_back_or_default account_url
    else
      render :action => :new
    end
  end
  
  def show
    @user = @current_user
  end

  def edit
    @user = @current_user
  end
  
  def update
    @user = @current_user # makes our views "cleaner" and more consistent
    if @user.update_attributes(params[:user])
      flash[:notice] = "Account updated!"
      redirect_to account_url
    else
      render :action => :edit
    end
  end
end
USERS_CONTROLLER

secret = `rake secret`.split("\n").last

file "test/fixtures/users.yml", <<-USERS
ben:
  login: bjohnson
  password_salt: <%= salt = User.unique_token %>
  crypted_password: <%= Authlogic::CryptoProviders::Sha512.encrypt("benrocks" + salt) %>
  persistence_token: #{secret}
  email: ben@ben.com
USERS

file "test/functional/password_resets_controller_test.rb", <<-PASSWORD_RESETS_CONTROLLER_TEST
require 'test_helper'

class PasswordResetsControllerTest < ActionController::TestCase
  # Replace this with your real tests.
  test "the truth" do
    assert true
  end
end
PASSWORD_RESETS_CONTROLLER_TEST

file "test/functional/user_sessions_controller_test.rb", <<-USER_SESSIONS_CONTROLLER_TEST
require 'test_helper'

class PasswordResetsControllerTest < ActionController::TestCase
  # Replace this with your real tests.
  test "the truth" do
    assert true
  end
end
phobos:authlogic_example_template miky$ cat test/functional/user_sessions_controller_test.rb
require 'test_helper'

class UserSessionsControllerTest < ActionController::TestCase
  test "should get new" do
    get :new
    assert_response :success
  end
  
  test "should create user session" do
    post :create, :user_session => { :login => "bjohnson", :password => "benrocks" }
    assert user_session = UserSession.find
    assert_equal users(:ben), user_session.user
    assert_redirected_to account_path
  end
  
  test "should destroy user session" do
    delete :destroy
    assert_nil UserSession.find
    assert_redirected_to new_user_session_path
  end
end
USER_SESSIONS_CONTROLLER_TEST

file "test/functional/users_controller_test.rb", <<-USERS_CONTROLLER_TEST
require 'test_helper'

class UsersControllerTest < ActionController::TestCase
  test "should get new" do
    get :new
    assert_response :success
  end
  
  test "should create user" do
    assert_difference('User.count') do
      post :create, :user => { :login => "ben", :password => "benrocks", :password_confirmation => "benrocks", :email => "myemail@email.com" }
    end
    
    assert_redirected_to account_path
  end
  
  test "should show user" do
    set_session_for(users(:ben))
    get :show
    assert_response :success
  end

  test "should get edit" do
    set_session_for(users(:ben))
    get :edit, :id => users(:ben).id
    assert_response :success
  end

  test "should update user" do
    set_session_for(users(:ben))
    put :update, :id => users(:ben).id, :user => { }
    assert_redirected_to account_path
  end
end

USERS_CONTROLLER_TEST
